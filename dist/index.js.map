{
  "version": 3,
  "sources": ["../lib/accessors.js", "../lib/base.js", "../lib/main.js", "../lib/ndarray.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major' );\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = \u03B1*x*x^T + A` where `\u03B1` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @private\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of columns in the matrix `A`\n* @param {number} alpha - scalar constant\n* @param {Object} x - input vector object\n* @param {Collection} x.data - input vector data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Object} A - input matrix object\n* @param {Collection} A.data - input matrix data\n* @param {Array<Function>} A.accessors - array element accessors\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @returns {Object} input matrix object\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var A = [ 1.0, 2.0, 3.0, 2.0, 1.0, 2.0, 3.0, 2.0, 1.0 ]; // => [ [ 1.0, 2.0, 3.0 ], [ 2.0, 1.0, 2.0 ], [ 3.0, 2.0, 1.0 ] ]\n* var x = [ 1.0, 2.0, 3.0 ];\n*\n* gsyr( 'upper', 3, 1.0, arraylike2object( toAccessorArray( x ) ), 1, 0, arraylike2object( toAccessorArray( A ) ), 3, 1, 0 );\n* // A => [ 2.0, 4.0, 6.0, 2.0, 5.0, 8.0, 3.0, 2.0, 10.0 ]\n*/\nfunction gsyr( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len\n\tvar getX;\n\tvar getA;\n\tvar setA;\n\tvar xbuf;\n\tvar Abuf;\n\tvar isrm;\n\tvar tmp;\n\tvar ix0;\n\tvar ix1;\n\tvar sa0;\n\tvar sa1;\n\tvar i0;\n\tvar i1;\n\tvar ia;\n\tvar ox;\n\tvar v;\n\n\t// Cache references to array data:\n\txbuf = x.data;\n\tAbuf = A.data;\n\n\t// Cache references to element accessors:\n\tgetX = x.accessors[ 0 ];\n\tgetA = A.accessors[ 0 ];\n\tsetA = A.accessors[ 1 ];\n\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tif ( isrm ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // isColMajor\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tox = offsetX;\n\tif (\n\t\t( !isrm && uplo === 'upper' ) ||\n\t\t( isrm && uplo === 'lower' )\n\t) {\n\t\tix1 = ox;\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tv = getX( xbuf, ix1 );\n\t\t\tif ( v !== 0.0 ) {\n\t\t\t\ttmp = alpha * v;\n\t\t\t\tia = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tfor ( i0 = 0; i0 <= i1; i0++ ) {\n\t\t\t\t\tv = getX( xbuf, ix0 ) * tmp;\n\t\t\t\t\tsetA( Abuf, ia, getA( Abuf, ia ) + v );\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t\tia += sa0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t}\n\t\treturn A;\n\t}\n\t// ( isrm && uplo === 'upper' ) || ( !isrm && uplo === 'lower' )\n\tix1 = ox;\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\tv = getX( xbuf, ix1 );\n\t\tif ( v !== 0.0 ) {\n\t\t\ttmp = alpha * v;\n\t\t\tia = offsetA + (sa1*i1) + (sa0*i1);\n\t\t\tix0 = ix1;\n\t\t\tfor ( i0 = i1; i0 < N; i0++ ) {\n\t\t\t\tv = getX( xbuf, ix0 ) * tmp;\n\t\t\t\tsetA( Abuf, ia, getA( Abuf, ia ) + v );\n\t\t\t\tix0 += strideX;\n\t\t\t\tia += sa0;\n\t\t\t}\n\t\t}\n\t\tix1 += strideX;\n\t}\n\treturn A;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsyr;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major' );\nvar accessors = require( './accessors.js' );\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = \u03B1*x*x^T + A` where `\u03B1` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @private\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input vector\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @returns {NumericArray} `A`\n*\n* @example\n* var A = [ 1.0, 2.0, 3.0, 2.0, 1.0, 2.0, 3.0, 2.0, 1.0 ]; // => [ [ 1.0, 2.0, 3.0 ], [ 2.0, 1.0, 2.0 ], [ 3.0, 2.0, 1.0 ] ]\n* var x = [ 1.0, 2.0, 3.0 ];\n*\n* gsyr( 'upper', 3, 1.0, x, 1, 0, A, 3, 1, 0 );\n* // A => [ 2.0, 4.0, 6.0, 2.0, 5.0, 8.0, 3.0, 2.0, 10.0 ]\n*/\nfunction gsyr( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len\n\tvar isrm;\n\tvar tmp;\n\tvar ix0;\n\tvar ix1;\n\tvar sa0;\n\tvar sa1;\n\tvar i0;\n\tvar i1;\n\tvar ia;\n\tvar ix;\n\tvar oa;\n\tvar ox;\n\n\tox = arraylike2object( x );\n\toa = arraylike2object( A );\n\tif ( ox.accessorProtocol || oa.accessorProtocol ) {\n\t\taccessors( uplo, N, alpha, ox, strideX, offsetX, oa, strideA1, strideA2, offsetA );\n\t\treturn A;\n\t}\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tif ( isrm ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // isColMajor\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tix = offsetX;\n\tif (\n\t\t( !isrm && uplo === 'upper' ) ||\n\t\t( isrm && uplo === 'lower' )\n\t) {\n\t\tix1 = ix;\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\ttmp = alpha * x[ ix1 ];\n\t\t\t\tia = offsetA + (sa1*i1);\n\t\t\t\tix0 = ix;\n\t\t\t\tfor ( i0 = 0; i0 <= i1; i0++ ) {\n\t\t\t\t\tA[ ia ] += x[ ix0 ] * tmp;\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t\tia += sa0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t}\n\t\treturn A;\n\t}\n\t// ( isrm && uplo === 'upper' ) || ( !isrm && uplo === 'lower' )\n\tix1 = ix;\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\ttmp = alpha * x[ ix1 ];\n\t\t\tia = offsetA + (sa1*i1) + (sa0*i1);\n\t\t\tix0 = ix1;\n\t\t\tfor ( i0 = i1; i0 < N; i0++ ) {\n\t\t\t\tA[ ia ] += x[ ix0 ] * tmp;\n\t\t\t\tix0 += strideX;\n\t\t\t\tia += sa0;\n\t\t\t}\n\t\t}\n\t\tix1 += strideX;\n\t}\n\treturn A;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsyr;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isLayout = require( '@stdlib/blas-base-assert-is-layout' );\nvar isMatrixTriangle = require( '@stdlib/blas-base-assert-is-matrix-triangle' );\nvar isColumnMajor = require( '@stdlib/ndarray-base-assert-is-column-major-string' );\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar max = require( '@stdlib/math-base-special-fast-max' );\nvar format = require( '@stdlib/string-format' );\nvar base = require( './base.js' );\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = \u03B1*x*x^T + A` where `\u03B1` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input vector\n* @param {integer} strideX - stride length for `x`\n* @param {NumericArray} A - input matrix\n* @param {integer} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be non-zero\n* @throws {RangeError} eighth argument must be a valid stride\n* @returns {NumericArray} `A`\n*\n* @example\n* var A = [ 1.0, 2.0, 3.0, 2.0, 1.0, 2.0, 3.0, 2.0, 1.0 ]; // => [ [ 1.0, 2.0, 3.0 ], [ 2.0, 1.0, 2.0 ], [ 3.0, 2.0, 1.0 ] ]\n* var x = [ 1.0, 2.0, 3.0 ];\n*\n* gsyr( 'row-major', 'upper', 3, 1.0, x, 1, A, 3 );\n* // A => [ 2.0, 4.0, 6.0, 2.0, 5.0, 8.0, 3.0, 2.0, 10.0 ]\n*/\nfunction gsyr( order, uplo, N, alpha, x, strideX, A, LDA ) {\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Sixth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA ) );\n\t}\n\t// Check if we can early return...\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\tif ( isColumnMajor( order ) ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\tox = stride2offset( N, strideX );\n\treturn base( uplo, N, alpha, x, strideX, ox, A, sa1, sa2, 0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsyr;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isMatrixTriangle = require( '@stdlib/blas-base-assert-is-matrix-triangle' );\nvar format = require( '@stdlib/string-format' );\nvar base = require( './base.js' );\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = \u03B1*x*x^T + A` where `\u03B1` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input vector\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @throws {TypeError} first argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} second argument must be a nonnegative integer\n* @throws {RangeError} fifth argument must be non-zero\n* @throws {RangeError} eighth argument must be non-zero\n* @throws {RangeError} ninth argument must be non-zero\n* @returns {NumericArray} `A`\n*\n* @example\n* var A = [ 1.0, 2.0, 3.0, 2.0, 1.0, 2.0, 3.0, 2.0, 1.0 ]; // => [ [ 1.0, 2.0, 3.0 ], [ 2.0, 1.0, 2.0 ], [ 3.0, 2.0, 1.0 ] ]\n* var x = [ 1.0, 2.0, 3.0 ];\n*\n* gsyr( 'upper', 3, 1.0, x, 1, 0, A, 3, 1, 0 );\n* // A => [ 2.0, 4.0, 6.0, 2.0, 5.0, 8.0, 3.0, 2.0, 10.0 ]\n*/\nfunction gsyr( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( strideA1 === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideA1 ) );\n\t}\n\tif ( strideA2 === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Ninth argument must be non-zero. Value: `%d`.', strideA2 ) );\n\t}\n\t// Check if we can early return...\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\treturn base( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsyr;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the symmetric rank 1 operation `A = \u03B1*x*x^T + A` where `\u03B1` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @module @stdlib/blas-base-gsyr\n*\n* @example\n* var gsyr = require( '@stdlib/blas-base-gsyr' );\n*\n* var A = [ 1.0, 2.0, 3.0, 2.0, 1.0, 2.0, 3.0, 2.0, 1.0 ]; // => [ [ 1.0, 2.0, 3.0 ], [ 2.0, 1.0, 2.0 ], [ 3.0, 2.0, 1.0 ] ]\n* var x = [ 1.0, 2.0, 3.0 ];\n*\n* gsyr( 'row-major', 'upper', 3, 1.0, x, 1, A, 3 );\n* // A => [ 2.0, 4.0, 6.0, 2.0, 5.0, 8.0, 3.0, 2.0, 10.0 ]\n*\n* @example\n* var gsyr = require( '@stdlib/blas-base-gsyr' );\n*\n* var A = [ 1.0, 2.0, 3.0, 2.0, 1.0, 2.0, 3.0, 2.0, 1.0 ]; // => [ [ 1.0, 2.0, 3.0 ], [ 2.0, 1.0, 2.0 ], [ 3.0, 2.0, 1.0 ] ]\n* var x = [ 1.0, 2.0, 3.0 ];\n*\n* gsyr.ndarray( 'upper', 3, 1.0, x, 1, 0, A, 3, 1, 0 );\n* // A => [ 2.0, 4.0, 6.0, 2.0, 5.0, 8.0, 3.0, 2.0, 10.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n"],
  "mappings": "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",
  "names": ["require_accessors", "__commonJSMin", "exports", "module", "isRowMajor", "gsyr", "uplo", "N", "alpha", "x", "strideX", "offsetX", "A", "strideA1", "strideA2", "offsetA", "getX", "getA", "setA", "xbuf", "Abuf", "isrm", "tmp", "ix0", "ix1", "sa0", "sa1", "i0", "i1", "ia", "ox", "v", "require_base", "__commonJSMin", "exports", "module", "arraylike2object", "isRowMajor", "accessors", "gsyr", "uplo", "N", "alpha", "x", "strideX", "offsetX", "A", "strideA1", "strideA2", "offsetA", "isrm", "tmp", "ix0", "ix1", "sa0", "sa1", "i0", "i1", "ia", "ix", "oa", "ox", "require_main", "__commonJSMin", "exports", "module", "isLayout", "isMatrixTriangle", "isColumnMajor", "stride2offset", "max", "format", "base", "gsyr", "order", "uplo", "N", "alpha", "x", "strideX", "A", "LDA", "sa1", "sa2", "ox", "require_ndarray", "__commonJSMin", "exports", "module", "isMatrixTriangle", "format", "base", "gsyr", "uplo", "N", "alpha", "x", "strideX", "offsetX", "A", "strideA1", "strideA2", "offsetA", "setReadOnly", "main", "ndarray"]
}
