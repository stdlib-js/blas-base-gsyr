{"version":3,"file":"index.mjs","sources":["../lib/base.js","../lib/accessors.js","../lib/main.js","../lib/ndarray.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @private\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input vector\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @returns {NumericArray} `A`\n*\n* @example\n* var A = [ 1.0, 2.0, 3.0, 2.0, 1.0, 2.0, 3.0, 2.0, 1.0 ]; // => [ [ 1.0, 2.0, 3.0 ], [ 2.0, 1.0, 2.0 ], [ 3.0, 2.0, 1.0 ] ]\n* var x = [ 1.0, 2.0, 3.0 ];\n*\n* gsyr( 'upper', 3, 1.0, x, 1, 0, A, 3, 1, 0 );\n* // A => [ 2.0, 4.0, 6.0, 2.0, 5.0, 8.0, 3.0, 2.0, 10.0 ]\n*/\nfunction gsyr( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len\n\tvar isrm;\n\tvar tmp;\n\tvar ix0;\n\tvar ix1;\n\tvar sa0;\n\tvar sa1;\n\tvar i0;\n\tvar i1;\n\tvar ia;\n\tvar ix;\n\tvar oa;\n\tvar ox;\n\n\tox = arraylike2object( x );\n\toa = arraylike2object( A );\n\tif ( ox.accessorProtocol || oa.accessorProtocol ) {\n\t\taccessors( uplo, N, alpha, ox, strideX, offsetX, oa, strideA1, strideA2, offsetA );\n\t\treturn A;\n\t}\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tif ( isrm ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // isColMajor\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tix = offsetX;\n\tif (\n\t\t( !isrm && uplo === 'upper' ) ||\n\t\t( isrm && uplo === 'lower' )\n\t) {\n\t\tix1 = ix;\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\ttmp = alpha * x[ ix1 ];\n\t\t\t\tia = offsetA + (sa1*i1);\n\t\t\t\tix0 = ix;\n\t\t\t\tfor ( i0 = 0; i0 <= i1; i0++ ) {\n\t\t\t\t\tA[ ia ] += x[ ix0 ] * tmp;\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t\tia += sa0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t}\n\t\treturn A;\n\t}\n\t// ( isrm && uplo === 'upper' ) || ( !isrm && uplo === 'lower' )\n\tix1 = ix;\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\ttmp = alpha * x[ ix1 ];\n\t\t\tia = offsetA + (sa1*i1) + (sa0*i1);\n\t\t\tix0 = ix1;\n\t\t\tfor ( i0 = i1; i0 < N; i0++ ) {\n\t\t\t\tA[ ia ] += x[ ix0 ] * tmp;\n\t\t\t\tix0 += strideX;\n\t\t\t\tia += sa0;\n\t\t\t}\n\t\t}\n\t\tix1 += strideX;\n\t}\n\treturn A;\n}\n\n\n// EXPORTS //\n\nexport default gsyr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @private\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of columns in the matrix `A`\n* @param {number} alpha - scalar constant\n* @param {Object} x - input vector object\n* @param {Collection} x.data - input vector data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Object} A - input matrix object\n* @param {Collection} A.data - input matrix data\n* @param {Array<Function>} A.accessors - array element accessors\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @returns {Object} input matrix object\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var A = [ 1.0, 2.0, 3.0, 2.0, 1.0, 2.0, 3.0, 2.0, 1.0 ]; // => [ [ 1.0, 2.0, 3.0 ], [ 2.0, 1.0, 2.0 ], [ 3.0, 2.0, 1.0 ] ]\n* var x = [ 1.0, 2.0, 3.0 ];\n*\n* gsyr( 'upper', 3, 1.0, arraylike2object( toAccessorArray( x ) ), 1, 0, arraylike2object( toAccessorArray( A ) ), 3, 1, 0 );\n* // A => [ 2.0, 4.0, 6.0, 2.0, 5.0, 8.0, 3.0, 2.0, 10.0 ]\n*/\nfunction gsyr( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len\n\tvar getX;\n\tvar getA;\n\tvar setA;\n\tvar xbuf;\n\tvar Abuf;\n\tvar isrm;\n\tvar tmp;\n\tvar ix0;\n\tvar ix1;\n\tvar sa0;\n\tvar sa1;\n\tvar i0;\n\tvar i1;\n\tvar ia;\n\tvar ox;\n\tvar v;\n\n\t// Cache references to array data:\n\txbuf = x.data;\n\tAbuf = A.data;\n\n\t// Cache references to element accessors:\n\tgetX = x.accessors[ 0 ];\n\tgetA = A.accessors[ 0 ];\n\tsetA = A.accessors[ 1 ];\n\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tif ( isrm ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // isColMajor\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tox = offsetX;\n\tif (\n\t\t( !isrm && uplo === 'upper' ) ||\n\t\t( isrm && uplo === 'lower' )\n\t) {\n\t\tix1 = ox;\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tv = getX( xbuf, ix1 );\n\t\t\tif ( v !== 0.0 ) {\n\t\t\t\ttmp = alpha * v;\n\t\t\t\tia = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tfor ( i0 = 0; i0 <= i1; i0++ ) {\n\t\t\t\t\tv = getX( xbuf, ix0 ) * tmp;\n\t\t\t\t\tsetA( Abuf, ia, getA( Abuf, ia ) + v );\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t\tia += sa0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t}\n\t\treturn A;\n\t}\n\t// ( isrm && uplo === 'upper' ) || ( !isrm && uplo === 'lower' )\n\tix1 = ox;\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\tv = getX( xbuf, ix1 );\n\t\tif ( v !== 0.0 ) {\n\t\t\ttmp = alpha * v;\n\t\t\tia = offsetA + (sa1*i1) + (sa0*i1);\n\t\t\tix0 = ix1;\n\t\t\tfor ( i0 = i1; i0 < N; i0++ ) {\n\t\t\t\tv = getX( xbuf, ix0 ) * tmp;\n\t\t\t\tsetA( Abuf, ia, getA( Abuf, ia ) + v );\n\t\t\t\tix0 += strideX;\n\t\t\t\tia += sa0;\n\t\t\t}\n\t\t}\n\t\tix1 += strideX;\n\t}\n\treturn A;\n}\n\n\n// EXPORTS //\n\nexport default gsyr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLayout from '@stdlib/blas-base-assert-is-layout';\nimport isMatrixTriangle from '@stdlib/blas-base-assert-is-matrix-triangle';\nimport isColumnMajor from '@stdlib/ndarray-base-assert-is-column-major-string';\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport max from '@stdlib/math-base-special-fast-max';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input vector\n* @param {integer} strideX - stride length for `x`\n* @param {NumericArray} A - input matrix\n* @param {integer} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be non-zero\n* @throws {RangeError} eighth argument must be a valid stride\n* @returns {NumericArray} `A`\n*\n* @example\n* var A = [ 1.0, 2.0, 3.0, 2.0, 1.0, 2.0, 3.0, 2.0, 1.0 ]; // => [ [ 1.0, 2.0, 3.0 ], [ 2.0, 1.0, 2.0 ], [ 3.0, 2.0, 1.0 ] ]\n* var x = [ 1.0, 2.0, 3.0 ];\n*\n* gsyr( 'row-major', 'upper', 3, 1.0, x, 1, A, 3 );\n* // A => [ 2.0, 4.0, 6.0, 2.0, 5.0, 8.0, 3.0, 2.0, 10.0 ]\n*/\nfunction gsyr( order, uplo, N, alpha, x, strideX, A, LDA ) {\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Sixth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA ) );\n\t}\n\t// Check if we can early return...\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\tif ( isColumnMajor( order ) ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\tox = stride2offset( N, strideX );\n\treturn base( uplo, N, alpha, x, strideX, ox, A, sa1, sa2, 0 );\n}\n\n\n// EXPORTS //\n\nexport default gsyr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMatrixTriangle from '@stdlib/blas-base-assert-is-matrix-triangle';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` should be referenced\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input vector\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @throws {TypeError} first argument must specify whether to reference the lower or upper triangular matrix\n* @throws {RangeError} second argument must be a nonnegative integer\n* @throws {RangeError} fifth argument must be non-zero\n* @throws {RangeError} eighth argument must be non-zero\n* @throws {RangeError} ninth argument must be non-zero\n* @returns {NumericArray} `A`\n*\n* @example\n* var A = [ 1.0, 2.0, 3.0, 2.0, 1.0, 2.0, 3.0, 2.0, 1.0 ]; // => [ [ 1.0, 2.0, 3.0 ], [ 2.0, 1.0, 2.0 ], [ 3.0, 2.0, 1.0 ] ]\n* var x = [ 1.0, 2.0, 3.0 ];\n*\n* gsyr( 'upper', 3, 1.0, x, 1, 0, A, 3, 1, 0 );\n* // A => [ 2.0, 4.0, 6.0, 2.0, 5.0, 8.0, 3.0, 2.0, 10.0 ]\n*/\nfunction gsyr( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must specify whether to reference the lower or upper triangular matrix. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( strideA1 === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideA1 ) );\n\t}\n\tif ( strideA2 === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Ninth argument must be non-zero. Value: `%d`.', strideA2 ) );\n\t}\n\t// Check if we can early return...\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\treturn base( uplo, N, alpha, x, strideX, offsetX, A, strideA1, strideA2, offsetA ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gsyr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix.\n*\n* @module @stdlib/blas-base-gsyr\n*\n* @example\n* import gsyr from '@stdlib/blas-base-gsyr';\n*\n* var A = [ 1.0, 2.0, 3.0, 2.0, 1.0, 2.0, 3.0, 2.0, 1.0 ]; // => [ [ 1.0, 2.0, 3.0 ], [ 2.0, 1.0, 2.0 ], [ 3.0, 2.0, 1.0 ] ]\n* var x = [ 1.0, 2.0, 3.0 ];\n*\n* gsyr( 'row-major', 'upper', 3, 1.0, x, 1, A, 3 );\n* // A => [ 2.0, 4.0, 6.0, 2.0, 5.0, 8.0, 3.0, 2.0, 10.0 ]\n*\n* @example\n* import gsyr from '@stdlib/blas-base-gsyr';\n*\n* var A = [ 1.0, 2.0, 3.0, 2.0, 1.0, 2.0, 3.0, 2.0, 1.0 ]; // => [ [ 1.0, 2.0, 3.0 ], [ 2.0, 1.0, 2.0 ], [ 3.0, 2.0, 1.0 ] ]\n* var x = [ 1.0, 2.0, 3.0 ];\n*\n* gsyr.ndarray( 'upper', 3, 1.0, x, 1, 0, A, 3, 1, 0 );\n* // A => [ 2.0, 4.0, 6.0, 2.0, 5.0, 8.0, 3.0, 2.0, 10.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n"],"names":["gsyr","uplo","N","alpha","x","strideX","offsetX","A","strideA1","strideA2","offsetA","isrm","tmp","ix0","ix1","sa0","sa1","i0","i1","ia","ix","oa","ox","arraylike2object","accessorProtocol","getX","getA","setA","xbuf","Abuf","v","data","accessors","isRowMajor","order","LDA","sa2","isLayout","TypeError","format","isMatrixTriangle","RangeError","max","isColumnMajor","base","stride2offset","setReadOnly","main","ndarray"],"mappings":"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"}